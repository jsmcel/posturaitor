import { manipulateAsync, SaveFormat } from 'expo-image-manipulator';
import * as FileSystem from 'expo-file-system';

export class PhotoFilterService {
  
  // Filtros tem√°ticos por cada punto de la Gran V√≠a
  static getLocationFilters(stopId) {
    const filtersByLocation = {
      1: { // Palacio de Cibeles
        name: "Cibeles",
        filters: [
          { id: 'royal', name: 'üëë Real', description: 'Elegancia dorada' },
          { id: 'vintage', name: 'üìú Vintage', description: 'Nostalgia cl√°sica' },
          { id: 'dramatic', name: 'üé≠ Dram√°tico', description: 'Alto contraste' }
        ]
      },
      2: { // Casa del Libro
        name: "Literario",
        filters: [
          { id: 'sepia', name: 'üìö Sepia', description: 'Como p√°ginas antiguas' },
          { id: 'noir', name: 'üñ§ Noir', description: 'Misterio literario' },
          { id: 'warm', name: '‚òï C√°lido', description: 'Caf√© y libros' }
        ]
      },
      3: { // Banco de Espa√±a
        name: "Atraco",
        filters: [
          { id: 'heist', name: 'üí∞ Atraco', description: 'Estilo Casa de Papel' },
          { id: 'gold', name: 'üèÜ Dorado', description: 'Lujo y poder' },
          { id: 'security', name: 'üîí Seguridad', description: 'Azules intensos' }
        ]
      },
      4: { // Edificio Metr√≥polis
        name: "Arquitect√≥nico", 
        filters: [
          { id: 'architecture', name: 'üèõÔ∏è Cl√°sico', description: 'L√≠neas perfectas' },
          { id: 'sunset', name: 'üåÖ Atardecer', description: 'Dorados c√°lidos' },
          { id: 'urban', name: 'üèôÔ∏è Urbano', description: 'Contrastes modernos' }
        ]
      },
      5: { // C√≠rculo de Bellas Artes
        name: "Art√≠stico",
        filters: [
          { id: 'artistic', name: 'üé® Art√≠stico', description: 'Colores vibrantes' },
          { id: 'sketch', name: '‚úèÔ∏è Boceto', description: 'Como un dibujo' },
          { id: 'pop', name: 'üí• Pop Art', description: 'Colores saturados' }
        ]
      }
    };

    return filtersByLocation[stopId] || {
      name: "Cl√°sico",
      filters: [
        { id: 'natural', name: 'üåü Natural', description: 'Sin filtro' },
        { id: 'enhance', name: '‚ú® Realzado', description: 'Mejora autom√°tica' },
        { id: 'cool', name: '‚ùÑÔ∏è Fresco', description: 'Tonos fr√≠os' }
      ]
    };
  }

  // Aplicar filtro espec√≠fico a una imagen
  static async applyFilter(imageUri, filterId, intensity = 1.0) {
    try {
      console.log(`üé® Aplicando filtro ${filterId} con intensidad ${intensity}`);

      if (filterId === 'natural') {
        return imageUri; // Sin cambios
      }

      const filterActions = this.getFilterActions(filterId, intensity);
      
      const result = await manipulateAsync(
        imageUri,
        filterActions,
        {
          compress: 0.9,
          format: SaveFormat.JPEG,
        }
      );

      return result.uri;
    } catch (error) {
      console.error('Error applying filter:', error);
      return imageUri; // Fallback a imagen original
    }
  }

  // Obtener acciones de filtro compatibles con expo-image-manipulator
  static getFilterActions(filterId, intensity) {
    // IMPORTANTE: expo-image-manipulator solo soporta: resize, rotate, flip, crop
    // No soporta brightness, contrast, saturation
    
    // Por ahora, solo aplicamos transformaciones b√°sicas que S√ç funcionan
    const configs = {
      'royal': [
        // Efecto dorado: rotar ligeramente para efecto "elegante"
        { rotate: 0.5 * intensity }
      ],
      'vintage': [
        // Efecto vintage: sin cambios por ahora
      ],
      'dramatic': [
        // Efecto dram√°tico: sin cambios por ahora  
      ],
      'sepia': [
        // Efecto sepia: sin cambios por ahora
      ],
      'noir': [
        // Efecto noir: sin cambios por ahora
      ],
      'warm': [
        // Efecto c√°lido: sin cambios por ahora
      ],
      'heist': [
        // Efecto atraco: sin cambios por ahora
      ],
      'gold': [
        // Efecto dorado: sin cambios por ahora
      ],
      'security': [
        // Efecto seguridad: sin cambios por ahora
      ],
      'architecture': [
        // Efecto arquitect√≥nico: sin cambios por ahora
      ],
      'sunset': [
        // Efecto atardecer: sin cambios por ahora
      ],
      'urban': [
        // Efecto urbano: sin cambios por ahora
      ],
      'artistic': [
        // Efecto art√≠stico: sin cambios por ahora
      ],
      'sketch': [
        // Efecto boceto: sin cambios por ahora
      ],
      'pop': [
        // Efecto pop: sin cambios por ahora
      ]
    };

    return configs[filterId] || [];
  }

  // Aplicar filtro B&N real usando procesamiento de imagen
  static async applyBlackWhiteFilter(imageUri) {
    try {
      console.log('‚ö´ Aplicando filtro B&N real...');
      
      // Para crear un efecto B&N real, necesitar√≠amos una librer√≠a como react-native-image-filter-kit
      // Por ahora, vamos a usar un enfoque alternativo con manipulaci√≥n de la imagen
      
      // Crear m√∫ltiples versiones con diferentes contrastes y combinarlas
      const manipulations = [
        // Reducir la saturaci√≥n simulando B&N
        { resize: { width: 1, height: 1 } }, // Crear una versi√≥n muy peque√±a
      ];

      const result = await manipulateAsync(
        imageUri,
        manipulations,
        {
          compress: 0.9,
          format: SaveFormat.JPEG,
        }
      );

      // Por ahora, devolvemos la imagen original
      // En una implementaci√≥n completa usar√≠amos react-native-image-filter-kit
      console.log('‚ö†Ô∏è Filtro B&N simulado (requiere librer√≠a adicional)');
      return imageUri;
    } catch (error) {
      console.error('Error applying B&W filter:', error);
      return imageUri;
    }
  }

  // Aplicar m√∫ltiples ajustes de edici√≥n
  static async applyEdits(imageUri, edits) {
    try {
      console.log('‚úèÔ∏è Aplicando ediciones:', edits);

      const manipulations = [];
      
      // IMPORTANTE: Solo usar acciones soportadas por expo-image-manipulator
      // Soportadas: resize, rotate, flip, crop
      
      if (edits.rotate && edits.rotate !== 0) {
        manipulations.push({ rotate: edits.rotate });
      }
      if (edits.crop) {
        manipulations.push({ crop: edits.crop });
      }
      if (edits.flip) {
        // expo-image-manipulator acepta flip como string, no como objeto
        if (edits.flip.horizontal) {
          manipulations.push({ flip: 'horizontal' });
        } else if (edits.flip.vertical) {
          manipulations.push({ flip: 'vertical' });
        }
      }
      
      // Aplicar filtro B&N si est√° especificado
      if (edits.blackWhite) {
        return await this.applyBlackWhiteFilter(imageUri);
      }
      
      // NOTA: brightness, contrast, saturation NO est√°n soportados
      // Los sliders pueden moverse pero no aplicar√°n cambios visuales
      // Para implementar estos efectos necesitar√≠amos usar otra librer√≠a

      // Si no hay manipulaciones v√°lidas, devolver imagen original
      if (manipulations.length === 0) {
        console.log('‚ö†Ô∏è No hay ediciones v√°lidas para aplicar');
        return imageUri;
      }

      const result = await manipulateAsync(
        imageUri,
        manipulations,
        {
          compress: 0.9,
          format: SaveFormat.JPEG
        }
      );

      return result.uri;
    } catch (error) {
      console.error('Error applying edits:', error);
      return imageUri;
    }
  }

  // Crear collage con m√∫ltiples fotos
  static async createCollage(imageUris, layout = 'grid') {
    try {
      console.log('üñºÔ∏è Creando collage con layout:', layout);
      
      // Por ahora retornamos la primera imagen
      // En una implementaci√≥n completa, usar√≠amos Canvas o similar
      return imageUris[0];
    } catch (error) {
      console.error('Error creating collage:', error);
      return imageUris[0];
    }
  }

  // Agregar marcos tem√°ticos
  static async addFrame(imageUri, frameType, stopId) {
    try {
      console.log(`üñºÔ∏è Agregando marco ${frameType} para punto ${stopId}`);
      
      const frame = this.getFrameForLocation(stopId, frameType);
      
      // Por ahora retornamos la imagen original
      // En implementaci√≥n completa, overlay del marco
      return imageUri;
    } catch (error) {
      console.error('Error adding frame:', error);
      return imageUri;
    }
  }

  // Obtener marcos por ubicaci√≥n
  static getFrameForLocation(stopId, frameType) {
    const frames = {
      1: { // Cibeles
        elegant: 'Marcos dorados elegantes',
        royal: 'Marcos reales con coronas',
        classic: 'Marcos cl√°sicos'
      },
      3: { // Banco de Espa√±a
        heist: 'Marcos estilo atraco',
        vault: 'Marcos de caja fuerte',
        money: 'Marcos con billetes'
      },
      5: { // Bellas Artes
        artistic: 'Marcos art√≠sticos',
        canvas: 'Marcos de lienzo',
        gallery: 'Marcos de galer√≠a'
      }
    };

    return frames[stopId]?.[frameType] || 'Marco b√°sico';
  }

  // Stickers animados por ubicaci√≥n
  static getStickersForLocation(stopId) {
    const stickers = {
      1: [ // Cibeles
        { id: 'crown', name: 'üëë', animated: true, description: 'Corona real' },
        { id: 'fountain', name: '‚õ≤', animated: false, description: 'Fuente' },
        { id: 'palace', name: 'üèõÔ∏è', animated: false, description: 'Palacio' }
      ],
      3: [ // Banco de Espa√±a
        { id: 'money', name: 'üí∞', animated: true, description: 'Dinero' },
        { id: 'mask', name: 'üé≠', animated: false, description: 'M√°scara Dal√≠' },
        { id: 'vault', name: 'üîí', animated: true, description: 'Caja fuerte' }
      ],
      4: [ // Metr√≥polis
        { id: 'building', name: 'üè¢', animated: false, description: 'Edificio' },
        { id: 'star', name: '‚≠ê', animated: true, description: 'Estrella' },
        { id: 'architecture', name: 'üìê', animated: false, description: 'Arquitectura' }
      ],
      5: [ // Bellas Artes
        { id: 'palette', name: 'üé®', animated: true, description: 'Paleta' },
        { id: 'brush', name: 'üñåÔ∏è', animated: false, description: 'Pincel' },
        { id: 'art', name: 'üñºÔ∏è', animated: false, description: 'Arte' }
      ]
    };

    return stickers[stopId] || [
      { id: 'posturaitor', name: 'üì∏', animated: true, description: 'POSTURAITOR' },
      { id: 'madrid', name: '‚ù§Ô∏è', animated: true, description: 'Madrid' }
    ];
  }

  // Generar vista previa de filtro
  static async generateFilterPreview(imageUri, filterId) {
    try {
      // Crear versi√≥n peque√±a para preview r√°pido
      const preview = await manipulateAsync(
        imageUri,
        [{ resize: { width: 150, height: 150 } }],
        { compress: 0.7, format: SaveFormat.JPEG }
      );

      // Aplicar filtro a preview
      return await this.applyFilter(preview.uri, filterId, 0.8);
    } catch (error) {
      console.error('Error generating filter preview:', error);
      return imageUri;
    }
  }

  // Guardar configuraci√≥n de filtros favoritos
  static async saveFavoriteFilter(userId, filterId, settings) {
    try {
      const favorites = await this.getFavoriteFilters(userId);
      favorites[filterId] = {
        ...settings,
        savedAt: new Date().toISOString(),
        usageCount: (favorites[filterId]?.usageCount || 0) + 1
      };

      await FileSystem.writeAsStringAsync(
        `${FileSystem.documentDirectory}favorite_filters_${userId}.json`,
        JSON.stringify(favorites)
      );

      console.log('üíæ Filtro favorito guardado:', filterId);
    } catch (error) {
      console.error('Error saving favorite filter:', error);
    }
  }

  // Obtener filtros favoritos
  static async getFavoriteFilters(userId) {
    try {
      const filePath = `${FileSystem.documentDirectory}favorite_filters_${userId}.json`;
      const fileInfo = await FileSystem.getInfoAsync(filePath);
      
      if (fileInfo.exists) {
        const content = await FileSystem.readAsStringAsync(filePath);
        return JSON.parse(content);
      }
      
      return {};
    } catch (error) {
      console.error('Error getting favorite filters:', error);
      return {};
    }
  }

  // Obtener filtros trending
  static getTrendingFilters() {
    return [
      { id: 'heist', name: 'üí∞ Atraco', usage: 1250, trend: '+15%' },
      { id: 'royal', name: 'üëë Real', usage: 980, trend: '+8%' },
      { id: 'artistic', name: 'üé® Art√≠stico', usage: 750, trend: '+22%' },
      { id: 'dramatic', name: 'üé≠ Dram√°tico', usage: 650, trend: '+5%' },
      { id: 'vintage', name: 'üìú Vintage', usage: 580, trend: '+12%' }
    ];
  }

  // Crear filtro personalizado
  static createCustomFilter(name, settings) {
    return {
      id: `custom_${Date.now()}`,
      name: name,
      custom: true,
      settings: settings,
      createdAt: new Date().toISOString()
    };
  }
}
